dataSources:
  ds0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    # 连接测试查询
    connection-test-query: SELECT 1 FROM DUAL
    # 连接最大存活时间.不等于0且小于30秒，会被重置为默认值30分钟.设置应该比mysql设置的超时时间短
    max-lifetime: 540000
    # 只有空闲连接数大于最大连接数且空闲时间超过该值，才会被释放
    idle-timeout: 500000
    # 最小空闲连接，默认值10，小于0或大于maximum-pool-size，都会重置为maximum-pool-size
    minimum-idle: 10
    # 最大连接数，小于等于0会被重置为默认值10；大于零小于1会被重置为minimum-idle的值
    maximum-pool-size: 12
    # 连接超时时间:毫秒，小于250毫秒，否则被重置为默认值30秒
    connection-timeout: 60000
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/twelvet-fast?allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: 123456

# Sharding JDBC配置 https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/#%E7%9B%B8%E5%85%B3%E5%8F%82%E8%80%83
rules:
  - !SHARDING
    tables:
      # 配置表分片
      sys_login_info:
        # 数据节点：数据源$->{0..N}.逻辑表名$->{0..N}
        actualDataNodes: ds$->{0..0}.sys_login_info_$->{0..3}
        # 分表策略，同分库策略,数据分布策略
        tableStrategy:
          standard:
            # 分片算法名称
            shardingColumn: id
            # 分片算法名称
            shardingAlgorithmName: twelvet-hash-mod
        # 分布式序列策略
        keyGenerateStrategy:
          # 自增列名称，缺省表示不使用自增主键生成器
          column: id
          # 分布式序列算法名称
          keyGeneratorName: twelvet-snowflake
    # 分片算法配置，如何分片到哪个表哪个库
    shardingAlgorithms:
      twelvet-hash-mod:
        # 分片算法类型
        type: HASH_MOD
        # 分片算法属性配置
        props:
          sharding-count: 2
    # 分布式序列算法配置，主键ID如何生成
    keyGenerators:
      twelvet-snowflake:
        # 分布式序列算法类型
        type: SNOWFLAKE
        # 分布式序列算法属性配置
        props:
          max-vibration-offset: 1
          max-tolerate-time-difference-milliseconds: 10
mode:
  # 单机运行
  type: Standalone
props:
  # 开启SQL显示
  sql-show: true
